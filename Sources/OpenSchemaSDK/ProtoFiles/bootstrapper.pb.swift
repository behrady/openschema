// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bootstrapper.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Magma_Orc8r_Challenge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var keyType: Magma_Orc8r_ChallengeKey.KeyType = .echo

  public var challenge: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// --------------------------------------------------------------------------
/// Challenge key stores the key used for challenge-response during bootstrap.
/// --------------------------------------------------------------------------
public struct Magma_Orc8r_ChallengeKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var keyType: Magma_Orc8r_ChallengeKey.KeyType = .echo

  /// Public key encoded in DER format
  public var key: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum KeyType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case echo // = 0
    case softwareRsaSha256 // = 1
    case softwareEcdsaSha256 // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .echo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .echo
      case 1: self = .softwareRsaSha256
      case 2: self = .softwareEcdsaSha256
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .echo: return 0
      case .softwareRsaSha256: return 1
      case .softwareEcdsaSha256: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Magma_Orc8r_ChallengeKey.KeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Magma_Orc8r_ChallengeKey.KeyType] = [
    .echo,
    .softwareRsaSha256,
    .softwareEcdsaSha256,
  ]
}

#endif  // swift(>=4.2)

public struct Magma_Orc8r_Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hwID: Magma_Orc8r_AccessGatewayID {
    get {return _hwID ?? Magma_Orc8r_AccessGatewayID()}
    set {_hwID = newValue}
  }
  /// Returns true if `hwID` has been explicitly set.
  public var hasHwID: Bool {return self._hwID != nil}
  /// Clears the value of `hwID`. Subsequent reads from it will return its default value.
  public mutating func clearHwID() {self._hwID = nil}

  public var challenge: Data = SwiftProtobuf.Internal.emptyData

  public var response: Magma_Orc8r_Response.OneOf_Response? = nil

  public var echoResponse: Magma_Orc8r_Response.Echo {
    get {
      if case .echoResponse(let v)? = response {return v}
      return Magma_Orc8r_Response.Echo()
    }
    set {response = .echoResponse(newValue)}
  }

  public var rsaResponse: Magma_Orc8r_Response.RSA {
    get {
      if case .rsaResponse(let v)? = response {return v}
      return Magma_Orc8r_Response.RSA()
    }
    set {response = .rsaResponse(newValue)}
  }

  public var ecdsaResponse: Magma_Orc8r_Response.ECDSA {
    get {
      if case .ecdsaResponse(let v)? = response {return v}
      return Magma_Orc8r_Response.ECDSA()
    }
    set {response = .ecdsaResponse(newValue)}
  }

  public var csr: Magma_Orc8r_CSR {
    get {return _csr ?? Magma_Orc8r_CSR()}
    set {_csr = newValue}
  }
  /// Returns true if `csr` has been explicitly set.
  public var hasCsr: Bool {return self._csr != nil}
  /// Clears the value of `csr`. Subsequent reads from it will return its default value.
  public mutating func clearCsr() {self._csr = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Response: Equatable {
    case echoResponse(Magma_Orc8r_Response.Echo)
    case rsaResponse(Magma_Orc8r_Response.RSA)
    case ecdsaResponse(Magma_Orc8r_Response.ECDSA)

  #if !swift(>=4.1)
    public static func ==(lhs: Magma_Orc8r_Response.OneOf_Response, rhs: Magma_Orc8r_Response.OneOf_Response) -> Bool {
      switch (lhs, rhs) {
      case (.echoResponse(let l), .echoResponse(let r)): return l == r
      case (.rsaResponse(let l), .rsaResponse(let r)): return l == r
      case (.ecdsaResponse(let l), .ecdsaResponse(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Echo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var response: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RSA {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var signature: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ECDSA {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var r: Data = SwiftProtobuf.Internal.emptyData

    public var s: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _hwID: Magma_Orc8r_AccessGatewayID? = nil
  fileprivate var _csr: Magma_Orc8r_CSR? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "magma.orc8r"

extension Magma_Orc8r_Challenge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Challenge"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_type"),
    2: .same(proto: "challenge"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.keyType)
      case 2: try decoder.decodeSingularBytesField(value: &self.challenge)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.keyType != .echo {
      try visitor.visitSingularEnumField(value: self.keyType, fieldNumber: 1)
    }
    if !self.challenge.isEmpty {
      try visitor.visitSingularBytesField(value: self.challenge, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_Challenge, rhs: Magma_Orc8r_Challenge) -> Bool {
    if lhs.keyType != rhs.keyType {return false}
    if lhs.challenge != rhs.challenge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_ChallengeKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChallengeKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_type"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.keyType)
      case 2: try decoder.decodeSingularBytesField(value: &self.key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.keyType != .echo {
      try visitor.visitSingularEnumField(value: self.keyType, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_ChallengeKey, rhs: Magma_Orc8r_ChallengeKey) -> Bool {
    if lhs.keyType != rhs.keyType {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_ChallengeKey.KeyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ECHO"),
    1: .same(proto: "SOFTWARE_RSA_SHA256"),
    2: .same(proto: "SOFTWARE_ECDSA_SHA256"),
  ]
}

extension Magma_Orc8r_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hw_id"),
    2: .same(proto: "challenge"),
    3: .standard(proto: "echo_response"),
    4: .standard(proto: "rsa_response"),
    5: .standard(proto: "ecdsa_response"),
    6: .same(proto: "csr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._hwID)
      case 2: try decoder.decodeSingularBytesField(value: &self.challenge)
      case 3:
        var v: Magma_Orc8r_Response.Echo?
        if let current = self.response {
          try decoder.handleConflictingOneOf()
          if case .echoResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.response = .echoResponse(v)}
      case 4:
        var v: Magma_Orc8r_Response.RSA?
        if let current = self.response {
          try decoder.handleConflictingOneOf()
          if case .rsaResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.response = .rsaResponse(v)}
      case 5:
        var v: Magma_Orc8r_Response.ECDSA?
        if let current = self.response {
          try decoder.handleConflictingOneOf()
          if case .ecdsaResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.response = .ecdsaResponse(v)}
      case 6: try decoder.decodeSingularMessageField(value: &self._csr)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._hwID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.challenge.isEmpty {
      try visitor.visitSingularBytesField(value: self.challenge, fieldNumber: 2)
    }
    switch self.response {
    case .echoResponse(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .rsaResponse(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .ecdsaResponse(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case nil: break
    }
    if let v = self._csr {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_Response, rhs: Magma_Orc8r_Response) -> Bool {
    if lhs._hwID != rhs._hwID {return false}
    if lhs.challenge != rhs.challenge {return false}
    if lhs.response != rhs.response {return false}
    if lhs._csr != rhs._csr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_Response.Echo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Magma_Orc8r_Response.protoMessageName + ".Echo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.response)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.response.isEmpty {
      try visitor.visitSingularBytesField(value: self.response, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_Response.Echo, rhs: Magma_Orc8r_Response.Echo) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_Response.RSA: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Magma_Orc8r_Response.protoMessageName + ".RSA"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.signature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_Response.RSA, rhs: Magma_Orc8r_Response.RSA) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_Response.ECDSA: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Magma_Orc8r_Response.protoMessageName + ".ECDSA"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "r"),
    2: .same(proto: "s"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.r)
      case 2: try decoder.decodeSingularBytesField(value: &self.s)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.r.isEmpty {
      try visitor.visitSingularBytesField(value: self.r, fieldNumber: 1)
    }
    if !self.s.isEmpty {
      try visitor.visitSingularBytesField(value: self.s, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_Response.ECDSA, rhs: Magma_Orc8r_Response.ECDSA) -> Bool {
    if lhs.r != rhs.r {return false}
    if lhs.s != rhs.s {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
