// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: certifier.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Magma_Orc8r_CertType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Bootstrap cert
  case `default` // = 0
  case vpn // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .vpn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .vpn: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Magma_Orc8r_CertType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Magma_Orc8r_CertType] = [
    .default,
    .vpn,
  ]
}

#endif  // swift(>=4.2)

public struct Magma_Orc8r_CSR {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Magma_Orc8r_Identity {
    get {return _id ?? Magma_Orc8r_Identity()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var validTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _validTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_validTime = newValue}
  }
  /// Returns true if `validTime` has been explicitly set.
  public var hasValidTime: Bool {return self._validTime != nil}
  /// Clears the value of `validTime`. Subsequent reads from it will return its default value.
  public mutating func clearValidTime() {self._validTime = nil}

  /// certificate signing request in DER encoding
  public var csrDer: Data = SwiftProtobuf.Internal.emptyData

  public var certType: Magma_Orc8r_CertType = .default

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: Magma_Orc8r_Identity? = nil
  fileprivate var _validTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

public struct Magma_Orc8r_Certificate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sn: Magma_Orc8r_Certificate.SN {
    get {return _sn ?? Magma_Orc8r_Certificate.SN()}
    set {_sn = newValue}
  }
  /// Returns true if `sn` has been explicitly set.
  public var hasSn: Bool {return self._sn != nil}
  /// Clears the value of `sn`. Subsequent reads from it will return its default value.
  public mutating func clearSn() {self._sn = nil}

  public var notBefore: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _notBefore ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_notBefore = newValue}
  }
  /// Returns true if `notBefore` has been explicitly set.
  public var hasNotBefore: Bool {return self._notBefore != nil}
  /// Clears the value of `notBefore`. Subsequent reads from it will return its default value.
  public mutating func clearNotBefore() {self._notBefore = nil}

  public var notAfter: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _notAfter ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_notAfter = newValue}
  }
  /// Returns true if `notAfter` has been explicitly set.
  public var hasNotAfter: Bool {return self._notAfter != nil}
  /// Clears the value of `notAfter`. Subsequent reads from it will return its default value.
  public mutating func clearNotAfter() {self._notAfter = nil}

  /// signed certificate in DER encoding
  public var certDer: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct SN {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sn: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _sn: Magma_Orc8r_Certificate.SN? = nil
  fileprivate var _notBefore: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _notAfter: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Magma_Orc8r_CACert {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ca certificate in DER encoding
  public var cert: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "magma.orc8r"

extension Magma_Orc8r_CertType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "VPN"),
  ]
}

extension Magma_Orc8r_CSR: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CSR"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "valid_time"),
    3: .standard(proto: "csr_der"),
    4: .standard(proto: "cert_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._id)
      case 2: try decoder.decodeSingularMessageField(value: &self._validTime)
      case 3: try decoder.decodeSingularBytesField(value: &self.csrDer)
      case 4: try decoder.decodeSingularEnumField(value: &self.certType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._validTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.csrDer.isEmpty {
      try visitor.visitSingularBytesField(value: self.csrDer, fieldNumber: 3)
    }
    if self.certType != .default {
      try visitor.visitSingularEnumField(value: self.certType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_CSR, rhs: Magma_Orc8r_CSR) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._validTime != rhs._validTime {return false}
    if lhs.csrDer != rhs.csrDer {return false}
    if lhs.certType != rhs.certType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_Certificate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Certificate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sn"),
    2: .standard(proto: "not_before"),
    3: .standard(proto: "not_after"),
    4: .standard(proto: "cert_der"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._sn)
      case 2: try decoder.decodeSingularMessageField(value: &self._notBefore)
      case 3: try decoder.decodeSingularMessageField(value: &self._notAfter)
      case 4: try decoder.decodeSingularBytesField(value: &self.certDer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._notBefore {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._notAfter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.certDer.isEmpty {
      try visitor.visitSingularBytesField(value: self.certDer, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_Certificate, rhs: Magma_Orc8r_Certificate) -> Bool {
    if lhs._sn != rhs._sn {return false}
    if lhs._notBefore != rhs._notBefore {return false}
    if lhs._notAfter != rhs._notAfter {return false}
    if lhs.certDer != rhs.certDer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_Certificate.SN: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Magma_Orc8r_Certificate.protoMessageName + ".SN"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sn"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sn)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sn.isEmpty {
      try visitor.visitSingularStringField(value: self.sn, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_Certificate.SN, rhs: Magma_Orc8r_Certificate.SN) -> Bool {
    if lhs.sn != rhs.sn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Magma_Orc8r_CACert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CACert"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cert"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.cert)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cert.isEmpty {
      try visitor.visitSingularBytesField(value: self.cert, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Magma_Orc8r_CACert, rhs: Magma_Orc8r_CACert) -> Bool {
    if lhs.cert != rhs.cert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
